#!/usr/bin/env python2
#encoding:utf-8
import sys
import ast
import getopt
from bs4 import BeautifulSoup

class HTMLParser:
    def __init__(self, f):
        self.html = f 
        self.soup = BeautifulSoup(self.html, 'html.parser')
        self.data = []
    def htmlsrc(self, tag):
        result = self.soup.find_all(tag)
        for i in result:
            self.data.append(i.get('src'))
    def htmltag(self, tag):
        self.htmltagattr(tag, {})
    def htmltagattr(self, tag, attr):
        result = self.soup.find_all(tag, attrs=attr)
        for i in result:
            self.data.append(i)
    def htmltext(self, tag):
        result = self.soup.find_all(tag)
        for i in result:
            for j in i:
                self.data.append(j)
    def htmllink(self, tag):
        result = self.soup.find_all(tag)
        for i in result:
            self.data.append(i.get('href'))
    def htmlval(self, tag, attr):
        result = self.soup.find_all(tag)
        for i in result:
            self.data.append(i.get(attr))
    def htmltagn(self, tag, pos, n):
        result = self.soup.find_all(tag)
        if n == -1:
            last = -1
        else:
            last = pos + n
        first = pos
        for i in result[first:last]:
            self.data.append(i)
    def htmluntag(self):
        self.data.append(self.soup.text)
    def parseattr(self, attr):
        if(len(attr) == 0):
            a = {}
        else:
            a = '{"' + attr.split(':')[0] + '":"' + ' '.join(attr.split(':')[1].split(',')) + '"}'
            a = ast.literal_eval(a) 
        return a
    def emitdata(self):
        if self.data == None:
            return 1
        for i in self.data:
            if i == None:
                continue
            print(i.encode('utf-8'))
        return 0
def usage():
    print('usage')
    sys.exit()
def main():
    s = True
    filename = sys.stdin
    tag = ''
    command = ''
    attr = ''
    pos = 0
    number = 1
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'a:t:c:f:p:n:hs', ['attr=', 'tag=','command=','filename=','pos=','number=','help','stdin'])
    except getopt.GetoptError as e:
        print(e)
        usage()
    for o, a in opts:
        if o in ['-t', '--tag']:
            tag = a
        elif o in ['-c', '--command']:
            command = a
        elif o in ['-a', '--attr']:
            attr = a
        elif o in ['-f', '--filename']:
            filename = a
            s = False
        elif o in ['-s', '--stdin']:
            # s and filename can be overriden by explict -f, --file option
            continue
        elif o in ['-p', '--pos']:
            pos = int(a)
        elif o in ['-n', '--number']:
            number = int(a)
        elif o in ['-h', '--help']:
            usage()
    if(s):
        hp = HTMLParser(filename)
    else:
        hp = HTMLParser(open(filename))
    if(command == 'htmlsrc'):
        hp.htmlsrc(tag)
    elif(command == 'htmltagattr'):
        hp.htmltagattr(tag, hp.parseattr(attr))
    elif(command == 'htmltext'):
        hp.htmltext(tag)
    elif(command == 'htmllink'):
        hp.htmllink(tag)
    elif(command == 'htmltag'):
        hp.htmltag(tag)
    elif(command == 'htmlval'):
        hp.htmlval(tag, attr)
    elif(command == 'htmltagn'):
        hp.htmltagn(tag, pos, number)
    elif(command == 'htmluntag'):
        hp.htmluntag()
    return hp.emitdata()
if __name__ == '__main__':
    sys.exit(main())
