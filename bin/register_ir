#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import select
import sys, threading
import subprocess
from subprocess import Popen

IRLOG_PATH = '/tmp/irlog.txt'
CMD = "mode2 -d /dev/lirc1 | tee " + IRLOG_PATH
# CMD = "./unittest.py"
LIRC_CONF_TEMPLATE = """begin remote

	name {remote_name}
	flags RAW_CODES
	eps 30
	aeps 100

	gap 200000
	toggle_bit_mask 0x0

        {signals}

end remote
"""
SIGNALS_TEMPLATE = """
	begin raw_codes
	name {signal_name}
	{signal}
	end raw_codes
"""


mode2 = None
mode2_buf = ""
patterns_cnt = 0
q_pressed = False
def mode2_thread():
    global mode2
    global mode2_buf
    global patterns_cnt
    global q_pressed
    q_pressed = False
    mode2 = Popen(CMD, shell=True, stdout=subprocess.PIPE)
    mode2_buf = ""
    poll_obj = select.poll()
    poll_obj.register(mode2.stdout, select.POLLIN)
    while q_pressed == False:
        poll_result = poll_obj.poll(0)
        if poll_result:
            line = mode2.stdout.readline().decode('utf-8')
            mode2_buf += line
            sys.stdout.write(line)
            sys.stdout.flush()
            if not line:
                continue
            patterns_cnt += 1
    mode2.terminate()




def convert_pattern(mode2_string):
    signals = [(line.split()[0], line.split()[1]) for line in mode2_string.strip().split('\n')[1:]]
    idx = 0
    while signals[idx][0] != 'pulse':
        idx += 1

    signals = signals[idx:]
    if len(signals) % 2 == 0:
        signals = signals[:-1]

    cnt = 0
    result = ""
    for sig in signals:
        s = sig[1]
        cnt += len(str(s)) + 1
        if cnt >= 50:
            result += '\n'
            cnt = 0
        result += s + " "
    return result

def main():
    global mode2
    global mode2_buf
    global patterns_cnt
    global q_pressed
    # get remote name
    remote_name = input('リモコンの名前を入力してください。')
    # while get signal name
    patterns = {}
    try:
        while True:
            signal_name = input('信号の名前を入力してください。終了する場合はCtrl+Dを押してください。')
            if signal_name == "":
                continue
            print('赤外線を照射してください')
            # mode2
            mthread = threading.Thread(target=mode2_thread)
            mthread.start()
            input('照射が終わったらqを入力した後Enterを押してください')
            q_pressed = True

            # convert_pattern
            patterns[signal_name] = convert_pattern(mode2_buf)
    except EOFError:
        pass

    if patterns_cnt > 255:
        print("警告: 信号数が255個を超えています。")

    # generate *.lircd.conf
    signals_str = ""
    for k, v in patterns.items():
        signals_str += SIGNALS_TEMPLATE.format(signal_name = k, signal = v)

    conf_str = LIRC_CONF_TEMPLATE.format(remote_name = remote_name, signals = signals_str)

    # create a file in /etc/lirc
    with open("/etc/lirc/lircd.conf.d/{}.lircd.conf".format(remote_name), "w") as f:
        f.write(conf_str)

    print("信号の登録が完了しました。以下のコマンドでlircdを再起動してください。\nsudo systemctl restart lircd\n以下のコマンドをタイプして赤外線を送信できます\nirsend SEND_ONCE {} 信号名".format(remote_name))

if __name__ == '__main__':
    main()
